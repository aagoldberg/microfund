// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class LoanCreated extends ethereum.Event {
  get params(): LoanCreated__Params {
    return new LoanCreated__Params(this);
  }
}

export class LoanCreated__Params {
  _event: LoanCreated;

  constructor(event: LoanCreated) {
    this._event = event;
  }

  get loan(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get loanAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fundingDeadline(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get repaymentDuration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get gracePeriod(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MicroLoanFactory extends ethereum.SmartContract {
  static bind(address: Address): MicroLoanFactory {
    return new MicroLoanFactory("MicroLoanFactory", address);
  }

  MAX_FUNDING_DURATION(): BigInt {
    let result = super.call(
      "MAX_FUNDING_DURATION",
      "MAX_FUNDING_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_FUNDING_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_FUNDING_DURATION",
      "MAX_FUNDING_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_GRACE_PERIOD(): BigInt {
    let result = super.call(
      "MAX_GRACE_PERIOD",
      "MAX_GRACE_PERIOD():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_GRACE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_GRACE_PERIOD",
      "MAX_GRACE_PERIOD():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LOAN_AMOUNT(): BigInt {
    let result = super.call(
      "MAX_LOAN_AMOUNT",
      "MAX_LOAN_AMOUNT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_LOAN_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LOAN_AMOUNT",
      "MAX_LOAN_AMOUNT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_REPAYMENT_DURATION(): BigInt {
    let result = super.call(
      "MAX_REPAYMENT_DURATION",
      "MAX_REPAYMENT_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_REPAYMENT_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_REPAYMENT_DURATION",
      "MAX_REPAYMENT_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_FUNDING_DURATION(): BigInt {
    let result = super.call(
      "MIN_FUNDING_DURATION",
      "MIN_FUNDING_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_FUNDING_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_FUNDING_DURATION",
      "MIN_FUNDING_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_GRACE_PERIOD(): BigInt {
    let result = super.call(
      "MIN_GRACE_PERIOD",
      "MIN_GRACE_PERIOD():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_GRACE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_GRACE_PERIOD",
      "MIN_GRACE_PERIOD():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_LOAN_AMOUNT(): BigInt {
    let result = super.call(
      "MIN_LOAN_AMOUNT",
      "MIN_LOAN_AMOUNT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_LOAN_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_LOAN_AMOUNT",
      "MIN_LOAN_AMOUNT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_REPAYMENT_DURATION(): BigInt {
    let result = super.call(
      "MIN_REPAYMENT_DURATION",
      "MIN_REPAYMENT_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_REPAYMENT_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_REPAYMENT_DURATION",
      "MIN_REPAYMENT_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowerLoans(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "borrowerLoans",
      "borrowerLoans(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_borrowerLoans(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowerLoans",
      "borrowerLoans(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  businessRegistry(): Address {
    let result = super.call(
      "businessRegistry",
      "businessRegistry():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_businessRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "businessRegistry",
      "businessRegistry():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createLoan(
    metadataURI: string,
    loanAmount: BigInt,
    fundingDuration: BigInt,
    repaymentDuration: BigInt,
    gracePeriod: BigInt,
  ): Address {
    let result = super.call(
      "createLoan",
      "createLoan(string,uint256,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(metadataURI),
        ethereum.Value.fromUnsignedBigInt(loanAmount),
        ethereum.Value.fromUnsignedBigInt(fundingDuration),
        ethereum.Value.fromUnsignedBigInt(repaymentDuration),
        ethereum.Value.fromUnsignedBigInt(gracePeriod),
      ],
    );

    return result[0].toAddress();
  }

  try_createLoan(
    metadataURI: string,
    loanAmount: BigInt,
    fundingDuration: BigInt,
    repaymentDuration: BigInt,
    gracePeriod: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createLoan",
      "createLoan(string,uint256,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(metadataURI),
        ethereum.Value.fromUnsignedBigInt(loanAmount),
        ethereum.Value.fromUnsignedBigInt(fundingDuration),
        ethereum.Value.fromUnsignedBigInt(repaymentDuration),
        ethereum.Value.fromUnsignedBigInt(gracePeriod),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getActiveLoans(): Array<Address> {
    let result = super.call(
      "getActiveLoans",
      "getActiveLoans():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getActiveLoans(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getActiveLoans",
      "getActiveLoans():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllLoans(): Array<Address> {
    let result = super.call("getAllLoans", "getAllLoans():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getAllLoans(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getAllLoans", "getAllLoans():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBorrowerLoanCount(borrower: Address): BigInt {
    let result = super.call(
      "getBorrowerLoanCount",
      "getBorrowerLoanCount(address):(uint256)",
      [ethereum.Value.fromAddress(borrower)],
    );

    return result[0].toBigInt();
  }

  try_getBorrowerLoanCount(borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowerLoanCount",
      "getBorrowerLoanCount(address):(uint256)",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowerLoans(borrower: Address): Array<Address> {
    let result = super.call(
      "getBorrowerLoans",
      "getBorrowerLoans(address):(address[])",
      [ethereum.Value.fromAddress(borrower)],
    );

    return result[0].toAddressArray();
  }

  try_getBorrowerLoans(borrower: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBorrowerLoans",
      "getBorrowerLoans(address):(address[])",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getLoanCount(): BigInt {
    let result = super.call("getLoanCount", "getLoanCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLoanCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLoanCount", "getLoanCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loans(param0: BigInt): Address {
    let result = super.call("loans", "loans(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_loans(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("loans", "loans(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _businessRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateLoanCall extends ethereum.Call {
  get inputs(): CreateLoanCall__Inputs {
    return new CreateLoanCall__Inputs(this);
  }

  get outputs(): CreateLoanCall__Outputs {
    return new CreateLoanCall__Outputs(this);
  }
}

export class CreateLoanCall__Inputs {
  _call: CreateLoanCall;

  constructor(call: CreateLoanCall) {
    this._call = call;
  }

  get metadataURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get loanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get fundingDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get repaymentDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get gracePeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateLoanCall__Outputs {
  _call: CreateLoanCall;

  constructor(call: CreateLoanCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
