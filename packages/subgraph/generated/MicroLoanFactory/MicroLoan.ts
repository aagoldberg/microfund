// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CampaignRefunded extends ethereum.Event {
  get params(): CampaignRefunded__Params {
    return new CampaignRefunded__Params(this);
  }
}

export class CampaignRefunded__Params {
  _event: CampaignRefunded;

  constructor(event: CampaignRefunded) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contributed extends ethereum.Event {
  get params(): Contributed__Params {
    return new Contributed__Params(this);
  }
}

export class Contributed__Params {
  _event: Contributed;

  constructor(event: Contributed) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundingGoalReached extends ethereum.Event {
  get params(): FundingGoalReached__Params {
    return new FundingGoalReached__Params(this);
  }
}

export class FundingGoalReached__Params {
  _event: FundingGoalReached;

  constructor(event: FundingGoalReached) {
    this._event = event;
  }

  get totalAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LoanDisbursed extends ethereum.Event {
  get params(): LoanDisbursed__Params {
    return new LoanDisbursed__Params(this);
  }
}

export class LoanDisbursed__Params {
  _event: LoanDisbursed;

  constructor(event: LoanDisbursed) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LoanRepaid extends ethereum.Event {
  get params(): LoanRepaid__Params {
    return new LoanRepaid__Params(this);
  }
}

export class LoanRepaid__Params {
  _event: LoanRepaid;

  constructor(event: LoanRepaid) {
    this._event = event;
  }

  get totalAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MetadataUpdated extends ethereum.Event {
  get params(): MetadataUpdated__Params {
    return new MetadataUpdated__Params(this);
  }
}

export class MetadataUpdated__Params {
  _event: MetadataUpdated;

  constructor(event: MetadataUpdated) {
    this._event = event;
  }

  get newURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class RepaymentMade extends ethereum.Event {
  get params(): RepaymentMade__Params {
    return new RepaymentMade__Params(this);
  }
}

export class RepaymentMade__Params {
  _event: RepaymentMade;

  constructor(event: RepaymentMade) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalRepaid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReturnsWithdrawn extends ethereum.Event {
  get params(): ReturnsWithdrawn__Params {
    return new ReturnsWithdrawn__Params(this);
  }
}

export class ReturnsWithdrawn__Params {
  _event: ReturnsWithdrawn;

  constructor(event: ReturnsWithdrawn) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MicroLoan extends ethereum.SmartContract {
  static bind(address: Address): MicroLoan {
    return new MicroLoan("MicroLoan", address);
  }

  METADATA_UPDATE_COOLDOWN(): BigInt {
    let result = super.call(
      "METADATA_UPDATE_COOLDOWN",
      "METADATA_UPDATE_COOLDOWN():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_METADATA_UPDATE_COOLDOWN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "METADATA_UPDATE_COOLDOWN",
      "METADATA_UPDATE_COOLDOWN():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrower(): Address {
    let result = super.call("borrower", "borrower():(address)", []);

    return result[0].toAddress();
  }

  try_borrower(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrower", "borrower():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  businessRegistry(): Address {
    let result = super.call(
      "businessRegistry",
      "businessRegistry():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_businessRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "businessRegistry",
      "businessRegistry():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contributions(param0: Address): BigInt {
    let result = super.call(
      "contributions",
      "contributions(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_contributions(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributions",
      "contributions(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributors(param0: BigInt): Address {
    let result = super.call("contributors", "contributors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_contributors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contributors",
      "contributors(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundingActive(): boolean {
    let result = super.call("fundingActive", "fundingActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_fundingActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("fundingActive", "fundingActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fundingDeadline(): BigInt {
    let result = super.call(
      "fundingDeadline",
      "fundingDeadline():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_fundingDeadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingDeadline",
      "fundingDeadline():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableReturns(contributor: Address): BigInt {
    let result = super.call(
      "getAvailableReturns",
      "getAvailableReturns(address):(uint256)",
      [ethereum.Value.fromAddress(contributor)],
    );

    return result[0].toBigInt();
  }

  try_getAvailableReturns(contributor: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableReturns",
      "getAvailableReturns(address):(uint256)",
      [ethereum.Value.fromAddress(contributor)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContributorCount(): BigInt {
    let result = super.call(
      "getContributorCount",
      "getContributorCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getContributorCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContributorCount",
      "getContributorCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContributors(): Array<Address> {
    let result = super.call(
      "getContributors",
      "getContributors():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getContributors(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getContributors",
      "getContributors():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getOutstandingAmount(): BigInt {
    let result = super.call(
      "getOutstandingAmount",
      "getOutstandingAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getOutstandingAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOutstandingAmount",
      "getOutstandingAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRemainingFundingTime(): BigInt {
    let result = super.call(
      "getRemainingFundingTime",
      "getRemainingFundingTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getRemainingFundingTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRemainingFundingTime",
      "getRemainingFundingTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRepaymentDeadline(): BigInt {
    let result = super.call(
      "getRepaymentDeadline",
      "getRepaymentDeadline():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getRepaymentDeadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRepaymentDeadline",
      "getRepaymentDeadline():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gracePeriod(): BigInt {
    let result = super.call("gracePeriod", "gracePeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gracePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gracePeriod", "gracePeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastMetadataUpdate(): BigInt {
    let result = super.call(
      "lastMetadataUpdate",
      "lastMetadataUpdate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastMetadataUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastMetadataUpdate",
      "lastMetadataUpdate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanAmount(): BigInt {
    let result = super.call("loanAmount", "loanAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_loanAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loanAmount", "loanAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanDisbursed(): boolean {
    let result = super.call("loanDisbursed", "loanDisbursed():(bool)", []);

    return result[0].toBoolean();
  }

  try_loanDisbursed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("loanDisbursed", "loanDisbursed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanDisbursedAt(): BigInt {
    let result = super.call(
      "loanDisbursedAt",
      "loanDisbursedAt():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_loanDisbursedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loanDisbursedAt",
      "loanDisbursedAt():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanFullyRepaid(): boolean {
    let result = super.call("loanFullyRepaid", "loanFullyRepaid():(bool)", []);

    return result[0].toBoolean();
  }

  try_loanFullyRepaid(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "loanFullyRepaid",
      "loanFullyRepaid():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadataURI(): string {
    let result = super.call("metadataURI", "metadataURI():(string)", []);

    return result[0].toString();
  }

  try_metadataURI(): ethereum.CallResult<string> {
    let result = super.tryCall("metadataURI", "metadataURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  repaymentDuration(): BigInt {
    let result = super.call(
      "repaymentDuration",
      "repaymentDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_repaymentDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repaymentDuration",
      "repaymentDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalFunded(): BigInt {
    let result = super.call("totalFunded", "totalFunded():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFunded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFunded", "totalFunded():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRepaid(): BigInt {
    let result = super.call("totalRepaid", "totalRepaid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRepaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRepaid", "totalRepaid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawnAmounts(param0: Address): BigInt {
    let result = super.call(
      "withdrawnAmounts",
      "withdrawnAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_withdrawnAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawnAmounts",
      "withdrawnAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _businessRegistry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _metadataURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _loanAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _fundingDeadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _repaymentDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _gracePeriod(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ContributeCall extends ethereum.Call {
  get inputs(): ContributeCall__Inputs {
    return new ContributeCall__Inputs(this);
  }

  get outputs(): ContributeCall__Outputs {
    return new ContributeCall__Outputs(this);
  }
}

export class ContributeCall__Inputs {
  _call: ContributeCall;

  constructor(call: ContributeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ContributeCall__Outputs {
  _call: ContributeCall;

  constructor(call: ContributeCall) {
    this._call = call;
  }
}

export class ContributeWithPermitCall extends ethereum.Call {
  get inputs(): ContributeWithPermitCall__Inputs {
    return new ContributeWithPermitCall__Inputs(this);
  }

  get outputs(): ContributeWithPermitCall__Outputs {
    return new ContributeWithPermitCall__Outputs(this);
  }
}

export class ContributeWithPermitCall__Inputs {
  _call: ContributeWithPermitCall;

  constructor(call: ContributeWithPermitCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ContributeWithPermitCall__Outputs {
  _call: ContributeWithPermitCall;

  constructor(call: ContributeWithPermitCall) {
    this._call = call;
  }
}

export class DisburseLoanCall extends ethereum.Call {
  get inputs(): DisburseLoanCall__Inputs {
    return new DisburseLoanCall__Inputs(this);
  }

  get outputs(): DisburseLoanCall__Outputs {
    return new DisburseLoanCall__Outputs(this);
  }
}

export class DisburseLoanCall__Inputs {
  _call: DisburseLoanCall;

  constructor(call: DisburseLoanCall) {
    this._call = call;
  }
}

export class DisburseLoanCall__Outputs {
  _call: DisburseLoanCall;

  constructor(call: DisburseLoanCall) {
    this._call = call;
  }
}

export class MakeRepaymentCall extends ethereum.Call {
  get inputs(): MakeRepaymentCall__Inputs {
    return new MakeRepaymentCall__Inputs(this);
  }

  get outputs(): MakeRepaymentCall__Outputs {
    return new MakeRepaymentCall__Outputs(this);
  }
}

export class MakeRepaymentCall__Inputs {
  _call: MakeRepaymentCall;

  constructor(call: MakeRepaymentCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MakeRepaymentCall__Outputs {
  _call: MakeRepaymentCall;

  constructor(call: MakeRepaymentCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class UpdateMetadataCall extends ethereum.Call {
  get inputs(): UpdateMetadataCall__Inputs {
    return new UpdateMetadataCall__Inputs(this);
  }

  get outputs(): UpdateMetadataCall__Outputs {
    return new UpdateMetadataCall__Outputs(this);
  }
}

export class UpdateMetadataCall__Inputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }

  get newURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateMetadataCall__Outputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }
}

export class WithdrawAvailableReturnsCall extends ethereum.Call {
  get inputs(): WithdrawAvailableReturnsCall__Inputs {
    return new WithdrawAvailableReturnsCall__Inputs(this);
  }

  get outputs(): WithdrawAvailableReturnsCall__Outputs {
    return new WithdrawAvailableReturnsCall__Outputs(this);
  }
}

export class WithdrawAvailableReturnsCall__Inputs {
  _call: WithdrawAvailableReturnsCall;

  constructor(call: WithdrawAvailableReturnsCall) {
    this._call = call;
  }
}

export class WithdrawAvailableReturnsCall__Outputs {
  _call: WithdrawAvailableReturnsCall;

  constructor(call: WithdrawAvailableReturnsCall) {
    this._call = call;
  }
}
